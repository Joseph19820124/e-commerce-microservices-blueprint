version: '3.8'

networks:
  ecommerce-network:
    driver: overlay
    attachable: true

volumes:
  mongodb_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local

services:
  # MongoDB Replica Set
  mongodb-primary:
    image: mongo:7.0
    container_name: mongodb-primary
    command: mongod --replSet rs0 --bind_ip_all
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    volumes:
      - mongodb_data:/data/db
    networks:
      - ecommerce-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  mongodb-secondary:
    image: mongo:7.0
    container_name: mongodb-secondary
    command: mongod --replSet rs0 --bind_ip_all
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    networks:
      - ecommerce-network
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Redis Cluster
  redis-master:
    image: redis:7-alpine
    container_name: redis-master
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  redis-slave:
    image: redis:7-alpine
    command: redis-server --replicaof redis-master 6379 --requirepass ${REDIS_PASSWORD} --masterauth ${REDIS_PASSWORD}
    networks:
      - ecommerce-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # PostgreSQL Master-Slave
  postgres-master:
    image: postgres:16-alpine
    container_name: postgres-master
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_REPLICATION_MODE: master
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ecommerce-network
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '1'
          memory: 1G

  postgres-slave:
    image: postgres:16-alpine
    environment:
      POSTGRES_REPLICATION_MODE: slave
      POSTGRES_MASTER_HOST: postgres-master
      POSTGRES_MASTER_PORT_NUMBER: 5432
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    networks:
      - ecommerce-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Elasticsearch Cluster
  elasticsearch-master:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch-master
    environment:
      - node.name=es-master
      - cluster.name=ecommerce-cluster
      - discovery.seed_hosts=elasticsearch-data1,elasticsearch-data2
      - cluster.initial_master_nodes=es-master
      - node.roles=master
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.transport.ssl.enabled=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ecommerce-network
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '1'
          memory: 2G

  elasticsearch-data1:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - node.name=es-data1
      - cluster.name=ecommerce-cluster
      - discovery.seed_hosts=elasticsearch-master,elasticsearch-data2
      - cluster.initial_master_nodes=es-master
      - node.roles=data,ingest
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.transport.ssl.enabled=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - ecommerce-network
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '1'
          memory: 2G

  elasticsearch-data2:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - node.name=es-data2
      - cluster.name=ecommerce-cluster
      - discovery.seed_hosts=elasticsearch-master,elasticsearch-data1
      - cluster.initial_master_nodes=es-master
      - node.roles=data,ingest
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.transport.ssl.enabled=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - ecommerce-network
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # Load Balancer / API Gateway
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - ecommerce-network
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Microservices with production settings
  product-service:
    image: ${DOCKER_REGISTRY}/product-service:${VERSION:-latest}
    environment:
      NODE_ENV: production
      PORT: 3001
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb-primary:27017,mongodb-secondary:27017/products_db?replicaSet=rs0&authSource=admin
      ELASTICSEARCH_HOSTS: '["https://elasticsearch-master:9200","https://elasticsearch-data1:9200","https://elasticsearch-data2:9200"]'
      ELASTIC_USERNAME: elastic
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    networks:
      - ecommerce-network
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  cart-service:
    image: ${DOCKER_REGISTRY}/cart-service:${VERSION:-latest}
    environment:
      SPRING_PROFILES_ACTIVE: production
      REDIS_SENTINEL_HOSTS: redis-master:26379,redis-slave:26379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - ecommerce-network
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  user-service:
    image: ${DOCKER_REGISTRY}/user-service:${VERSION:-latest}
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-master:5432/${POSTGRES_DB}
      DATABASE_READ_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-slave:5432/${POSTGRES_DB}
      SECRET_KEY: ${JWT_SECRET_KEY}
      ALGORITHM: ${JWT_ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES}
    networks:
      - ecommerce-network
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  search-service:
    image: ${DOCKER_REGISTRY}/search-service:${VERSION:-latest}
    environment:
      NODE_ENV: production
      PORT: 3002
      ELASTICSEARCH_HOSTS: '["https://elasticsearch-master:9200","https://elasticsearch-data1:9200","https://elasticsearch-data2:9200"]'
      ELASTIC_USERNAME: elastic
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    networks:
      - ecommerce-network
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  frontend:
    image: ${DOCKER_REGISTRY}/frontend:${VERSION:-latest}
    environment:
      REACT_APP_API_BASE_URL: https://${DOMAIN_NAME}
    networks:
      - ecommerce-network
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.25'
          memory: 256M