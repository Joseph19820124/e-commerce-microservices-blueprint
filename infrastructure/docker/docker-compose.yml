version: '3.8'

networks:
  ecommerce-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongodb_data:
  postgres_data:
  redis_data:
  elasticsearch_data:

services:
  # API Gateway
  nginx:
    image: nginx:alpine
    container_name: ecommerce-api-gateway
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    networks:
      - ecommerce-network
    depends_on:
      - product-service
      - cart-service
      - user-service
      - search-service

  # MongoDB for Product Service
  mongodb:
    image: mongo:7.0
    container_name: ecommerce-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: mongodb_password
      MONGO_INITDB_DATABASE: products_db
    volumes:
      - mongodb_data:/data/db
    networks:
      - ecommerce-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Cart Service
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass redis_password
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for User Service
  postgres:
    image: postgres:16-alpine
    container_name: ecommerce-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: users_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch for Search Service
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ecommerce-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for Elasticsearch visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: ecommerce-kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    networks:
      - ecommerce-network
    depends_on:
      - elasticsearch

  # Product Catalog Service (Node.js)
  product-service:
    build:
      context: ../../services/product-catalog-service
      dockerfile: Dockerfile
    container_name: ecommerce-product-service
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      MONGODB_URI: mongodb://admin:mongodb_password@mongodb:27017/products_db?authSource=admin
      ELASTICSEARCH_HOST: http://elasticsearch:9200
    networks:
      - ecommerce-network
    depends_on:
      - mongodb
      - elasticsearch
    volumes:
      - ../../services/product-catalog-service:/app
      - /app/node_modules

  # Shopping Cart Service (Spring Boot)
  cart-service:
    build:
      context: ../../services/shopping-cart-service
      dockerfile: Dockerfile
    container_name: ecommerce-cart-service
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password
    networks:
      - ecommerce-network
    depends_on:
      - redis
    volumes:
      - ../../services/shopping-cart-service:/app

  # User Profile Service (Python FastAPI)
  user-service:
    build:
      context: ../../services/user-profile-service
      dockerfile: Dockerfile
    container_name: ecommerce-user-service
    ports:
      - "8001:8001"
    environment:
      DATABASE_URL: postgresql://postgres:postgres_password@postgres:5432/users_db
      SECRET_KEY: your-secret-key-here
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
    networks:
      - ecommerce-network
    depends_on:
      - postgres
    volumes:
      - ../../services/user-profile-service:/app

  # Search Service (Node.js)
  search-service:
    build:
      context: ../../services/search-service
      dockerfile: Dockerfile
    container_name: ecommerce-search-service
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      PORT: 3002
      ELASTICSEARCH_HOST: http://elasticsearch:9200
    networks:
      - ecommerce-network
    depends_on:
      - elasticsearch
    volumes:
      - ../../services/search-service:/app
      - /app/node_modules

  # Frontend React Application
  frontend:
    build:
      context: ../../frontend/react-store-ui
      dockerfile: Dockerfile
    container_name: ecommerce-frontend
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_BASE_URL: http://localhost
    networks:
      - ecommerce-network
    depends_on:
      - nginx
    volumes:
      - ../../frontend/react-store-ui:/app
      - /app/node_modules