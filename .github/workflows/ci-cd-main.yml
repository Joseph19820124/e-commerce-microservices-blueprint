name: E-commerce Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '20'
  JAVA_VERSION: '17'
  PYTHON_VERSION: '3.11'

jobs:
  # Code Quality and Security Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f package.json ]; then
            npm ci
          fi

      - name: Run ESLint
        run: |
          if [ -f .eslintrc.js ] || [ -f .eslintrc.json ]; then
            npm run lint
          fi

      - name: Run Prettier
        run: |
          if [ -f .prettierrc ]; then
            npm run format:check
          fi

      - name: Run Security Audit
        run: |
          if [ -f package.json ]; then
            npm audit --audit-level moderate
          fi

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Test Suite
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [product-service, cart-service, user-service, search-service, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup test environment
        run: |
          case "${{ matrix.service }}" in
            *-service)
              if [[ "${{ matrix.service }}" == *"cart"* ]]; then
                echo "Setting up Java environment"
                echo "JAVA_HOME=$JAVA_HOME_17_X64" >> $GITHUB_ENV
              elif [[ "${{ matrix.service }}" == *"user"* ]]; then
                echo "Setting up Python environment"
                python -m pip install --upgrade pip
              else
                echo "Setting up Node.js environment"
                npm ci
              fi
              ;;
            frontend)
              echo "Setting up React environment"
              npm ci
              ;;
          esac

      - name: Run unit tests
        run: |
          cd services/${{ matrix.service }} 2>/dev/null || cd frontend/${{ matrix.service }} || exit 0
          case "${{ matrix.service }}" in
            *cart*)
              if [ -f pom.xml ]; then
                mvn test
              fi
              ;;
            *user*)
              if [ -f requirements.txt ]; then
                pip install -r requirements.txt
                pytest
              fi
              ;;
            *)
              if [ -f package.json ]; then
                npm test
              fi
              ;;
          esac

      - name: Generate test coverage
        run: |
          case "${{ matrix.service }}" in
            *cart*)
              mvn jacoco:report
              ;;
            *user*)
              pytest --cov=. --cov-report=xml
              ;;
            *)
              npm run test:coverage
              ;;
          esac

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage

  # Build Docker Images
  build:
    needs: [code-quality, test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [product-service, cart-service, user-service, search-service, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Security Scanning
  security-scan:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [product-service, cart-service, user-service, search-service, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Integration Tests
  integration-test:
    needs: build
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup test environment
        run: |
          docker-compose -f infrastructure/docker/docker-compose.yml up -d --wait

      - name: Run integration tests
        run: |
          # Wait for services to be ready
          sleep 30
          
          # Run integration test suite
          npm run test:integration

      - name: Collect test results
        if: always()
        run: |
          docker-compose logs > integration-test-logs.txt

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: |
            integration-test-logs.txt
            test-results/

  # Deploy to Staging
  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: [integration-test, security-scan]
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          # Update image tags in Kubernetes manifests
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" infrastructure/kubernetes/services/*.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f infrastructure/kubernetes/namespaces/
          kubectl apply -f infrastructure/kubernetes/secrets/
          kubectl apply -f infrastructure/kubernetes/databases/
          kubectl apply -f infrastructure/kubernetes/services/
          
          # Wait for rollout
          kubectl rollout status deployment -n ecommerce-staging --timeout=600s

      - name: Run smoke tests
        run: |
          # Run basic health checks
          ./ci-cd/scripts/smoke-tests.sh staging

  # Deploy to Production
  deploy-production:
    if: github.event_name == 'release'
    needs: [integration-test, security-scan]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to production
        run: |
          # Update image tags with release version
          sed -i "s|IMAGE_TAG|${{ github.event.release.tag_name }}|g" infrastructure/kubernetes/services/*.yaml
          
          # Apply production manifests
          kubectl apply -f infrastructure/kubernetes/namespaces/
          kubectl apply -f infrastructure/kubernetes/secrets/
          kubectl apply -f infrastructure/kubernetes/databases/
          kubectl apply -f infrastructure/kubernetes/services/
          
          # Rolling update with zero downtime
          kubectl rollout status deployment -n ecommerce-prod --timeout=600s

      - name: Run production health checks
        run: |
          ./ci-cd/scripts/smoke-tests.sh production

      - name: Notify deployment success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"🚀 E-commerce platform deployed successfully to production - Version: ${{ github.event.release.tag_name }}"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"❌ E-commerce platform deployment to production failed - Version: ${{ github.event.release.tag_name }}"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}